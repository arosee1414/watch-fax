//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

export default class Client {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl ?? "";
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    createWatch(body: WatchRecordCreateRequest | undefined): Promise<WatchRecord> {
        let url_ = this.baseUrl + "/api/v1/UserCollections";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCreateWatch(_response);
        });
    }

    protected processCreateWatch(response: Response): Promise<WatchRecord> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = WatchRecord.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<WatchRecord>(null as any);
    }

    /**
     * @return Success
     */
    getAllWatchRecords(): Promise<WatchRecord[]> {
        let url_ = this.baseUrl + "/api/v1/UserCollections";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetAllWatchRecords(_response);
        });
    }

    protected processGetAllWatchRecords(response: Response): Promise<WatchRecord[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(WatchRecord.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<WatchRecord[]>(null as any);
    }

    /**
     * @return Success
     */
    getWeatherForecast(): Promise<WeatherForecast[]> {
        let url_ = this.baseUrl + "/api/v1/WeatherForecast";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetWeatherForecast(_response);
        });
    }

    protected processGetWeatherForecast(response: Response): Promise<WeatherForecast[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(WeatherForecast.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<WeatherForecast[]>(null as any);
    }
}

export class DateOnly implements IDateOnly {
    year?: number;
    month?: number;
    day?: number;
    dayOfWeek?: DayOfWeek;
    readonly dayOfYear?: number;
    readonly dayNumber?: number;

    constructor(data?: IDateOnly) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.year = _data["year"];
            this.month = _data["month"];
            this.day = _data["day"];
            this.dayOfWeek = _data["dayOfWeek"];
            (<any>this).dayOfYear = _data["dayOfYear"];
            (<any>this).dayNumber = _data["dayNumber"];
        }
    }

    static fromJS(data: any): DateOnly {
        data = typeof data === 'object' ? data : {};
        let result = new DateOnly();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["year"] = this.year;
        data["month"] = this.month;
        data["day"] = this.day;
        data["dayOfWeek"] = this.dayOfWeek;
        data["dayOfYear"] = this.dayOfYear;
        data["dayNumber"] = this.dayNumber;
        return data;
    }
}

export interface IDateOnly {
    year?: number;
    month?: number;
    day?: number;
    dayOfWeek?: DayOfWeek;
    dayOfYear?: number;
    dayNumber?: number;
}

export enum DayOfWeek {
    _0 = 0,
    _1 = 1,
    _2 = 2,
    _3 = 3,
    _4 = 4,
    _5 = 5,
    _6 = 6,
}

export class WatchRecord implements IWatchRecord {
    brand?: string | undefined;
    model?: string | undefined;
    referenceNumber?: string | undefined;
    serialNumber?: string | undefined;
    productionYear?: number | undefined;
    purchaseDate?: number | undefined;
    purchasePrice?: number | undefined;
    hasPapers?: boolean | undefined;
    hasBox?: boolean | undefined;
    hasRecordOfAuthentication?: boolean | undefined;
    descriptionOfCondition?: string | undefined;
    story?: string | undefined;
    id?: string | undefined;
    userId?: string | undefined;

    constructor(data?: IWatchRecord) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.brand = _data["brand"];
            this.model = _data["model"];
            this.referenceNumber = _data["referenceNumber"];
            this.serialNumber = _data["serialNumber"];
            this.productionYear = _data["productionYear"];
            this.purchaseDate = _data["purchaseDate"];
            this.purchasePrice = _data["purchasePrice"];
            this.hasPapers = _data["hasPapers"];
            this.hasBox = _data["hasBox"];
            this.hasRecordOfAuthentication = _data["hasRecordOfAuthentication"];
            this.descriptionOfCondition = _data["descriptionOfCondition"];
            this.story = _data["story"];
            this.id = _data["id"];
            this.userId = _data["userId"];
        }
    }

    static fromJS(data: any): WatchRecord {
        data = typeof data === 'object' ? data : {};
        let result = new WatchRecord();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["brand"] = this.brand;
        data["model"] = this.model;
        data["referenceNumber"] = this.referenceNumber;
        data["serialNumber"] = this.serialNumber;
        data["productionYear"] = this.productionYear;
        data["purchaseDate"] = this.purchaseDate;
        data["purchasePrice"] = this.purchasePrice;
        data["hasPapers"] = this.hasPapers;
        data["hasBox"] = this.hasBox;
        data["hasRecordOfAuthentication"] = this.hasRecordOfAuthentication;
        data["descriptionOfCondition"] = this.descriptionOfCondition;
        data["story"] = this.story;
        data["id"] = this.id;
        data["userId"] = this.userId;
        return data;
    }
}

export interface IWatchRecord {
    brand?: string | undefined;
    model?: string | undefined;
    referenceNumber?: string | undefined;
    serialNumber?: string | undefined;
    productionYear?: number | undefined;
    purchaseDate?: number | undefined;
    purchasePrice?: number | undefined;
    hasPapers?: boolean | undefined;
    hasBox?: boolean | undefined;
    hasRecordOfAuthentication?: boolean | undefined;
    descriptionOfCondition?: string | undefined;
    story?: string | undefined;
    id?: string | undefined;
    userId?: string | undefined;
}

export class WatchRecordCreateRequest implements IWatchRecordCreateRequest {
    brand?: string | undefined;
    model?: string | undefined;
    referenceNumber?: string | undefined;
    serialNumber?: string | undefined;
    productionYear?: number | undefined;
    purchaseDate?: number | undefined;
    purchasePrice?: number | undefined;
    hasPapers?: boolean | undefined;
    hasBox?: boolean | undefined;
    hasRecordOfAuthentication?: boolean | undefined;
    descriptionOfCondition?: string | undefined;
    story?: string | undefined;

    constructor(data?: IWatchRecordCreateRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.brand = _data["brand"];
            this.model = _data["model"];
            this.referenceNumber = _data["referenceNumber"];
            this.serialNumber = _data["serialNumber"];
            this.productionYear = _data["productionYear"];
            this.purchaseDate = _data["purchaseDate"];
            this.purchasePrice = _data["purchasePrice"];
            this.hasPapers = _data["hasPapers"];
            this.hasBox = _data["hasBox"];
            this.hasRecordOfAuthentication = _data["hasRecordOfAuthentication"];
            this.descriptionOfCondition = _data["descriptionOfCondition"];
            this.story = _data["story"];
        }
    }

    static fromJS(data: any): WatchRecordCreateRequest {
        data = typeof data === 'object' ? data : {};
        let result = new WatchRecordCreateRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["brand"] = this.brand;
        data["model"] = this.model;
        data["referenceNumber"] = this.referenceNumber;
        data["serialNumber"] = this.serialNumber;
        data["productionYear"] = this.productionYear;
        data["purchaseDate"] = this.purchaseDate;
        data["purchasePrice"] = this.purchasePrice;
        data["hasPapers"] = this.hasPapers;
        data["hasBox"] = this.hasBox;
        data["hasRecordOfAuthentication"] = this.hasRecordOfAuthentication;
        data["descriptionOfCondition"] = this.descriptionOfCondition;
        data["story"] = this.story;
        return data;
    }
}

export interface IWatchRecordCreateRequest {
    brand?: string | undefined;
    model?: string | undefined;
    referenceNumber?: string | undefined;
    serialNumber?: string | undefined;
    productionYear?: number | undefined;
    purchaseDate?: number | undefined;
    purchasePrice?: number | undefined;
    hasPapers?: boolean | undefined;
    hasBox?: boolean | undefined;
    hasRecordOfAuthentication?: boolean | undefined;
    descriptionOfCondition?: string | undefined;
    story?: string | undefined;
}

export class WeatherForecast implements IWeatherForecast {
    date?: DateOnly;
    temperatureC?: number;
    readonly temperatureF?: number;
    summary?: string | undefined;

    constructor(data?: IWeatherForecast) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.date = _data["date"] ? DateOnly.fromJS(_data["date"]) : <any>undefined;
            this.temperatureC = _data["temperatureC"];
            (<any>this).temperatureF = _data["temperatureF"];
            this.summary = _data["summary"];
        }
    }

    static fromJS(data: any): WeatherForecast {
        data = typeof data === 'object' ? data : {};
        let result = new WeatherForecast();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["date"] = this.date ? this.date.toJSON() : <any>undefined;
        data["temperatureC"] = this.temperatureC;
        data["temperatureF"] = this.temperatureF;
        data["summary"] = this.summary;
        return data;
    }
}

export interface IWeatherForecast {
    date?: DateOnly;
    temperatureC?: number;
    temperatureF?: number;
    summary?: string | undefined;
}

export class ApiException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}